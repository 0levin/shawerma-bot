import os
import json
import random
import logging
from collections import Counter
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

logging.basicConfig(
    filename="bot.log",
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    encoding="utf-8"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SHAWERMA_FILE = "shawerma.json"
ORDERS_FILE = "orders.json"
TOKEN = ""

def load_data(file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        if not os.path.exists(file) or os.path.getsize(file) == 0:
            return []
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file}: {e}")
        return []

def save_data(data, file):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        logger.info(f"–§–∞–π–ª {file} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")

shawerma_json = load_data(SHAWERMA_FILE)

def create_menu_buttons(shawerma_data, extra_buttons=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö —à–∞—É—Ä–º—ã."""
    buttons = [
        [InlineKeyboardButton(f"{item['name']} - {item['price']} ‚ÇΩ", callback_data=f"item_{item['name']}")]
        for item in shawerma_data
    ]
    if extra_buttons:
        buttons.extend(extra_buttons)
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    greetings_name = user.first_name or user.username
    context.user_data['user'] = user.first_name or user.username
    context.user_data['chosen_items'] = []

    greetings = ["–•—ç–ª–æ—É", "–ù–∞–º–∞—Å—Ç–µ", "–ê—Å–∞–ª–∞–º –∞–ª–µ–π–∫—É–º", "–ö–æ–Ω–∏—á–∏–≤–∞", "–ù–∏—Ö–∞–æ", "–ü—Ä–∏–≤–µ—Ç", "–ë–æ–Ω–∂–æ—Ä–Ω–æ", "–°–∞–ª—é—Ç"]
    random_greeting = random.choice(greetings)

    buttons = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data="menu")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    await update.message.reply_text(
        f"{random_greeting}, <b>{greetings_name}</b>. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –º–µ–Ω—é.",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞."""
    await update.callback_query.answer()
    context.user_data['chosen_items'].clear()

    messages = [
        "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å",
        "–ö–∏—Ç–∞–π—Å–∫–∞—è –µ–¥–∞ - —Ç–æ–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç",
        "–õ–∞–Ω—á–±–æ–∫—Å - —Ç–æ–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç",
        "–ù–µ –µ—Å—Ç—å - –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç"
    ]
    random_message = random.choice(messages)

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data="menu")]])
    await update.callback_query.message.reply_text(
        f"{random_message}, <b>{context.user_data['user']}</b>.",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é."""
    await update.callback_query.answer()
    reply_markup = create_menu_buttons(shawerma_json, [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–∑ –º–µ–Ω—é:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–∫–∞–∑."""
    await update.callback_query.answer()
    chosen_item = update.callback_query.data.split("_")[1]
    context.user_data['chosen_items'].append(chosen_item)

    extra_buttons = [
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        [InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="order")]
    ]
    reply_markup = create_menu_buttons(shawerma_json, extra_buttons)
    transformed_chosen_items = ", ".join(context.user_data['chosen_items'])

    await update.callback_query.message.reply_text(
        f"–í–∞—à –∑–∞–∫–∞–∑:\n<b>{transformed_chosen_items}</b>\n\n–ß—Ç–æ-—Ç–æ –µ—â–µ?",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–∫—Å–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞."""
    await update.callback_query.answer()
    user = context.user_data.get('user')
    chosen_items = context.user_data.get('chosen_items', [])

    if not chosen_items:
        await update.callback_query.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç!")
        return

    orders = load_data(ORDERS_FILE)
    orders.append({"user": user, "order": chosen_items.copy()})
    save_data(orders, ORDERS_FILE)

    transformed_chosen_items = ", ".join(chosen_items)
    context.user_data['chosen_items'].clear()

    buttons = [
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="change")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="allorders")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    await update.callback_query.message.reply_text(
        f"–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. üôÇ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞: <b>{transformed_chosen_items}</b>",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤."""
    await update.callback_query.answer()
    orders = load_data(ORDERS_FILE)
    current_user = context.user_data.get('user')
    
    if not orders:
        orders_text = "–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        orders_text = "\n".join(f"<b>{o['user']}</b>: {', '.join(o['order'])}" for o in orders)

    total_items = Counter(item for o in orders for item in o['order'])
    total_items_text = "\n".join(f"<b>{item}</b>: {count}" for item, count in total_items.items())

    buttons = [[InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑" if any(o['user'] == current_user for o in orders) else "–ú–µ–Ω—é",
                callback_data="change" if any(o['user'] == current_user for o in orders) else "menu")]]
    reply_markup = InlineKeyboardMarkup(buttons)

    await update.callback_query.message.reply_text(
        f"<b>–ó–∞–∫–∞–∑—ã:</b>\n\n{orders_text}\n_\n\n<b>–ò—Ç–æ–≥:</b>\n\n{total_items_text}",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."""
    await update.callback_query.answer()
    orders = load_data(ORDERS_FILE)
    user = context.user_data.get('user')
    user_order = next((o for o in orders if o['user'] == user), None)

    if not user_order or not user_order['order']:
        await update.callback_query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!")
        return

    buttons = [[InlineKeyboardButton(item, callback_data=f"approvechange_{item}")] for item in user_order['order']]
    buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="allorders")])
    reply_markup = InlineKeyboardMarkup(buttons)

    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def approve_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∑–∞–∫–∞–∑–∞."""
    await update.callback_query.answer()
    chosen_item = update.callback_query.data.split("_")[1]
    user = context.user_data.get('user')
    orders = load_data(ORDERS_FILE)

    user_order = next((o for o in orders if o['user'] == user), None)
    if user_order and chosen_item in user_order['order']:
        user_order['order'].remove(chosen_item)
        if not user_order['order']:
            orders.remove(user_order)
        save_data(orders, ORDERS_FILE)

    buttons = [[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="allorders")]]
    if user_order and user_order['order']:
        buttons.append([InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="change")])
    reply_markup = InlineKeyboardMarkup(buttons)

    await update.callback_query.message.reply_text(
        f"–ü–æ–∑–∏—Ü–∏—è <b>{chosen_item}</b> —É–¥–∞–ª–µ–Ω–∞.",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(menu, pattern="^menu$"))
    app.add_handler(CallbackQueryHandler(cancel, pattern="^cancel$"))
    app.add_handler(CallbackQueryHandler(approve, pattern="^item_"))
    app.add_handler(CallbackQueryHandler(order, pattern="^order$"))
    app.add_handler(CallbackQueryHandler(all_orders, pattern="^allorders$"))
    app.add_handler(CallbackQueryHandler(change, pattern="^change$"))
    app.add_handler(CallbackQueryHandler(approve_change, pattern="^approvechange_"))
    
    logger.info("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    app.run_polling()

if __name__ == "__main__":
    main()
